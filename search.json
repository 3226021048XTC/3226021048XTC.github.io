[{"title":"C语言划水日记（1）","url":"/2022/09/28/C%E8%AF%AD%E8%A8%80%E5%88%92%E6%B0%B4%E6%97%A5%E8%AE%B0%EF%BC%881%EF%BC%89/","content":"<h1 id=\"一：基本数据类型的分类\"><a href=\"#一：基本数据类型的分类\" class=\"headerlink\" title=\"一：基本数据类型的分类\"></a>一：基本数据类型的分类</h1><h2 id=\"1-整形\"><a href=\"#1-整形\" class=\"headerlink\" title=\"1.整形\"></a>1.整形</h2><h3 id=\"有符号数：\"><a href=\"#有符号数：\" class=\"headerlink\" title=\"有符号数：\"></a>有符号数：</h3><h5 id=\"（1-short-int或short：-3276832767-2-152-15-1\"><a href=\"#（1-short-int或short：-3276832767-2-152-15-1\" class=\"headerlink\" title=\"（1)short int或short：-3276832767(2^152^15 -1)\"></a>（1)short int或short：-32768<del>32767(2^15</del>2^15 -1)</h5><h5 id=\"2-int-21474836482147483647（-2-312-31-1）\"><a href=\"#2-int-21474836482147483647（-2-312-31-1）\" class=\"headerlink\" title=\"(2)int: -21474836482147483647（-2^312^31 -1）\"></a>(2)int: -2147483648<del>2147483647（-2^31</del>2^31 -1）</h5><h5 id=\"3-long-int或long-21474836482147483647（-2-312-31-1）\"><a href=\"#3-long-int或long-21474836482147483647（-2-312-31-1）\" class=\"headerlink\" title=\"(3)long int或long: -21474836482147483647（-2^312^31-1）\"></a>(3)long int或long: -2147483648<del>2147483647（-2^31</del>2^31-1）</h5><h3 id=\"无符号数\"><a href=\"#无符号数\" class=\"headerlink\" title=\"无符号数\"></a>无符号数</h3><h5 id=\"1-unsigned-short-065535（02-16-1）\"><a href=\"#1-unsigned-short-065535（02-16-1）\" class=\"headerlink\" title=\"(1)unsigned short: 065535（02^16-1）\"></a>(1)unsigned short: 0<del>65535（0</del>2^16-1）</h5><h5 id=\"2-unsigned-04294967295（02-32-1）\"><a href=\"#2-unsigned-04294967295（02-32-1）\" class=\"headerlink\" title=\"(2)unsigned: 04294967295（02^32-1）\"></a>(2)unsigned: 0<del>4294967295（0</del>2^32-1）</h5><h5 id=\"3-unsigned-long-04294967295（02-32-1）\"><a href=\"#3-unsigned-long-04294967295（02-32-1）\" class=\"headerlink\" title=\"(3)unsigned long: 04294967295（02^32-1）\"></a>(3)unsigned long: 0<del>4294967295（0</del>2^32-1）</h5><h2 id=\"2-浮点型\"><a href=\"#2-浮点型\" class=\"headerlink\" title=\"2.浮点型\"></a>2.浮点型</h2><h5 id=\"1-单-精-度-float-3-4E-38～3-4E-38-7位有效数字\"><a href=\"#1-单-精-度-float-3-4E-38～3-4E-38-7位有效数字\" class=\"headerlink\" title=\"(1)单 精 度: float: -3.4E-38～3.4E+38   7位有效数字\"></a>(1)单 精 度: float: -3.4E-38～3.4E+38   7位有效数字</h5><h5 id=\"1-双-精-度-double-1-7E-308～1-7E-308-16位有效数字\"><a href=\"#1-双-精-度-double-1-7E-308～1-7E-308-16位有效数字\" class=\"headerlink\" title=\"(1)双 精 度: double: -1.7E-308～1.7E+308   16位有效数字\"></a>(1)双 精 度: double: -1.7E-308～1.7E+308   16位有效数字</h5><h5 id=\"1-长双精度-long-double-3-4E-308～3-4E-308-19位有效数字\"><a href=\"#1-长双精度-long-double-3-4E-308～3-4E-308-19位有效数字\" class=\"headerlink\" title=\"(1)长双精度: long double: -3.4E-308～3.4E+308   19位有效数字\"></a>(1)长双精度: long double: -3.4E-308～3.4E+308   19位有效数字</h5><h2 id=\"3-字符型\"><a href=\"#3-字符型\" class=\"headerlink\" title=\"3.字符型\"></a>3.字符型</h2><h5 id=\"1-字符：-char\"><a href=\"#1-字符：-char\" class=\"headerlink\" title=\"(1)字符： char\"></a>(1)字符： char</h5><h1 id=\"二：常量和变量\"><a href=\"#二：常量和变量\" class=\"headerlink\" title=\"二：常量和变量\"></a>二：常量和变量</h1><h4 id=\"常量定义：\"><a href=\"#常量定义：\" class=\"headerlink\" title=\"常量定义：\"></a>常量定义：</h4><p>程序运行时其值不能改变的量（即常数）</p>\n<h4 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类:\"></a>分类:</h4><h4 id=\"符号常量-用标识符代表常量定义格式：-define-符号常量-常量\"><a href=\"#符号常量-用标识符代表常量定义格式：-define-符号常量-常量\" class=\"headerlink\" title=\"符号常量:   用标识符代表常量定义格式： #define   符号常量   常量\"></a>符号常量:   用标识符代表常量定义格式： #define   符号常量   常量</h4><h4 id=\"直接常量\"><a href=\"#直接常量\" class=\"headerlink\" title=\"直接常量:\"></a>直接常量:</h4><p>​    整型常量   实型常量    字符常量   字符串常量</p>\n<h4 id=\"字符常量：用单引号括起来的单个普通字符或转义字符\"><a href=\"#字符常量：用单引号括起来的单个普通字符或转义字符\" class=\"headerlink\" title=\"字符常量：用单引号括起来的单个普通字符或转义字符\"></a>字符常量：用单引号括起来的单个普通字符或转义字符</h4><h4 id=\"字符常量的值：该字符的ASCII码值\"><a href=\"#字符常量的值：该字符的ASCII码值\" class=\"headerlink\" title=\"字符常量的值：该字符的ASCII码值\"></a>字符常量的值：该字符的ASCII码值</h4><h4 id=\"转义字符-反斜线后面跟一个字符或一个代码值表示\"><a href=\"#转义字符-反斜线后面跟一个字符或一个代码值表示\" class=\"headerlink\" title=\"转义字符:反斜线后面跟一个字符或一个代码值表示\"></a>转义字符:反斜线后面跟一个字符或一个代码值表示</h4><p>\\n:换行；                                       \\t:水平制表: </p>\n<p>\\v:垂直制表;                                   \\b:退格; </p>\n<p>\\r:回车;                                            \\f:换页; </p>\n<p>\\a:响铃;                                            \\\\:反斜线; </p>\n<p>\\‘:单引号;                                          \\“:双引号; </p>\n<p> \\ddd：3位8进制数代表的字符； \\xhh： 2位16进制数代表的字符；</p>\n<h4 id=\"字符串常量\"><a href=\"#字符串常量\" class=\"headerlink\" title=\"字符串常量:\"></a>字符串常量:</h4><p>定义：用双引号(“”)括起来的字符序列</p>\n<p>存储：每个字符串尾自动加一个 ‘\\0’ 作为字符</p>\n<h2 id=\"变量概念：其值可以改变的量\"><a href=\"#变量概念：其值可以改变的量\" class=\"headerlink\" title=\"变量概念：其值可以改变的量\"></a>变量概念：其值可以改变的量</h2><h4 id=\"变量三要素：变量名、变量类型和变量值\"><a href=\"#变量三要素：变量名、变量类型和变量值\" class=\"headerlink\" title=\"变量三要素：变量名、变量类型和变量值\"></a>变量三要素：变量名、变量类型和变量值</h4><h4 id=\"变量定义的一般格式：-数据类型-变量1-，变量2，…，变量n\"><a href=\"#变量定义的一般格式：-数据类型-变量1-，变量2，…，变量n\" class=\"headerlink\" title=\"变量定义的一般格式：     数据类型  变量1[，变量2，…，变量n];\"></a>变量定义的一般格式：     数据类型  变量1[，变量2，…，变量n];</h4><h3 id=\"常变量-const-数据类型-常变量名-x3D-初始值\"><a href=\"#常变量-const-数据类型-常变量名-x3D-初始值\" class=\"headerlink\" title=\"常变量: const 数据类型 常变量名&#x3D;初始值\"></a>常变量: const 数据类型 常变量名&#x3D;初始值</h3>","tags":["3"]},{"title":"Hello World","url":"/2022/09/25/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"博客：1","url":"/2022/09/25/%E5%8D%9A%E5%AE%A2%EF%BC%9A1/","content":"<h1 id=\"开始博客：Typora\"><a href=\"#开始博客：Typora\" class=\"headerlink\" title=\"开始博客：Typora\"></a>开始博客：Typora</h1><p>在文件夹source&gt;_posts下打开Git bush</p>\n<p>输入$hexo new “标题”；</p>\n<p>出现“标题.md”，打开编辑博客；</p>\n<p>（1）标题<br>Markdown 语法：</p>\n<h1 id=\"一级标题：Ctrl-1\"><a href=\"#一级标题：Ctrl-1\" class=\"headerlink\" title=\"一级标题：Ctrl+1\"></a>一级标题：Ctrl+1</h1><h2 id=\"二级标题：Ctrl-2\"><a href=\"#二级标题：Ctrl-2\" class=\"headerlink\" title=\"二级标题：Ctrl+2\"></a>二级标题：Ctrl+2</h2><h3 id=\"三级标题：Ctrl-3\"><a href=\"#三级标题：Ctrl-3\" class=\"headerlink\" title=\"三级标题：Ctrl+3\"></a>三级标题：Ctrl+3</h3><h4 id=\"四级标题：Ctrl-4\"><a href=\"#四级标题：Ctrl-4\" class=\"headerlink\" title=\"四级标题：Ctrl+4\"></a>四级标题：Ctrl+4</h4><h5 id=\"五级标题：Ctrl-5\"><a href=\"#五级标题：Ctrl-5\" class=\"headerlink\" title=\"五级标题：Ctrl+5\"></a>五级标题：Ctrl+5</h5><p>六级标题：Ctrl+6</p>\n<h2 id=\"段落：Ctrl-0\"><a href=\"#段落：Ctrl-0\" class=\"headerlink\" title=\"段落：Ctrl+0\"></a>段落：Ctrl+0</h2><p>（2）粗体、斜体、删除线和下划线<br>Markdown 语法：</p>\n<p>Ctrl+I：斜体</p>\n<p>Ctrl+B：粗体</p>\n<p>Ctrl+U：下划线</p>\n<p>Alt+Shift+5：删除线</p>\n<p>（3)\t文字引用：Ctrl+Shift+Q</p>\n<p>（4）代码块：</p>\n<p>行内代码：Ctrl+Shift+&#96;</p>\n<p>多行代码：Ctrl+Shift+K</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\"><br></code></pre></td></tr></table></figure>\n\n<p>(5)公式块:Ctrl+Shift+M<br>$$<br>Hello World<br>$$</p>\n<p>(6)图片：Ctrl+Shift+I</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">![示例图片](title/example.PNG &quot;示例图片&quot;) 添加图片<br></code></pre></td></tr></table></figure>\n\n<p>说明：在 Hexo中 插入图片时，请按照以下的步骤进行设置</p>\n<p>将 站点配置文件 中的 post_asset_folder 选项的值设置为 true</p>\n<p>在站点文件夹中打开 git bash，输入命令 npm install hexo-asset-image –save 安装插件</p>\n<p>这样，当使用 hexo new title 创建文章时，将同时在 source&#x2F;_post 文件夹中生成一个与 title 同名的文件夹，我们只需将图片放进此文件夹中，然后在文章中通过 Markdown 语法进行引用即可</p>\n<p>例如，在资源文件夹（就是那个与 title 同名的文件夹）中添加图片 example.PNG，则可以在对应的文章中使用语句 </p>\n<p>（7）超链接： Ctrl+K</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">1.[示例链接文字]（链接地址/“描述”）；<br>如：[示例链接]（https://www.example.com/“示例链接”）<br>   2.&lt;链接地址&gt;<br>   如&lt;https://www.example.com/&gt;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"快速排序","url":"/2022/10/11/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/","content":"<p>快速排序是C.R.A.Hoare于1962年提出的一种划分交换排序。它采用了一种分治的策略，通常称其为分治法(Divide-and-ConquerMethod)。</p>\n<p>该方法的基本思想是：</p>\n<ul>\n<li>1．先从数列中取出一个数作为基准数。&#x2F;&#x2F;<em>一般是中间值</em></li>\n<li>2．分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。</li>\n<li>3．再对左右区间重复第二步，直到各区间只有一个数。</li>\n</ul>\n<p>并且快速排序还有一个比较简单的思想，就是递归。对于每一趟排序都是一样的思想，只不过需要进行排序的数组的范围越来越小了，使用递归实现这种排序最适合不过了。</p>\n<h2 id=\"快速排序的特点及性能\"><a href=\"#快速排序的特点及性能\" class=\"headerlink\" title=\"快速排序的特点及性能\"></a>快速排序的特点及性能</h2><p>快速排序是在冒泡排序的基础上改进而来的，冒泡排序每次只能交换相邻的两个元素，而快速排序是跳跃式的交换，交换的距离很大，因此总的比较和交换次数少了很多，速度也快了不少。  </p>\n<p>但是快速排序在最坏情况下的时间复杂度和冒泡排序一样，是 <code>O(n2)</code>，实际上每次比较都需要交换，但是这种情况并不常见。我们可以思考一下如果每次比较都需要交换，那么数列的平均时间复杂度是 <code>O(nlogn)</code>，事实上在大多数时候，排序的速度要快于这个平均时间复杂度。这种算法实际上是一种分治法思想，也就是分而治之，把问题分为一个个的小部分来分别解决，再把结果组合起来。  </p>\n<p>快速排序只是使用数组原本的空间进行排序，所以所占用的空间应该是常量级的，但是由于每次划分之后是递归调用，所以递归调用在运行的过程中会消耗一定的空间，在一般情况下的空间复杂度为 <code>O(logn)</code>，在最差的情况下，若每次只完成了一个元素，那么空间复杂度为 <code>O(n)</code>。所以我们一般认为快速排序的空间复杂度为 <code>O(logn)</code>。  </p>\n<p>快速排序是一个不稳定的算法，在经过排序之后，可能会对相同值的元素的相对位置造成改变。  </p>\n<p>快速排序基本上被认为是相同数量级的所有排序算法中，平均性能最好的。</p>\n<h2 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h2><table>\n<thead>\n<tr>\n<th align=\"center\">7</th>\n<th align=\"center\">2</th>\n<th align=\"center\">4</th>\n<th align=\"center\">6</th>\n<th align=\"center\">1</th>\n<th align=\"center\">3</th>\n<th align=\"center\">8</th>\n<th align=\"center\">9</th>\n<th align=\"center\">12</th>\n<th align=\"center\">0</th>\n</tr>\n</thead>\n</table>\n<p>取数组的中间值作为基准值， 这组数据中取中间值1为基准值，</p>\n<p>设i&#x3D;1,j&#x3D;10,a[i]&#x3D;7,a[10]&#x3D;0,mid&#x3D;5,a[mid]&#x3D;1;</p>\n<p>寻找比中值(a[mid]&#x3D;1)大的数，即i&#x3D;1;接着寻找比中值小的数，即j&#x3D;10；</p>\n<p>将a[i&#x3D;1]&#x3D;7与a[j&#x3D;10]&#x3D;0交换，同时i++,j–，即此时i&#x3D;2,j&#x3D;9;此时数组为</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">0</th>\n<th align=\"center\">2</th>\n<th align=\"center\">4</th>\n<th align=\"center\">6</th>\n<th align=\"center\">1</th>\n<th align=\"center\">3</th>\n<th align=\"center\">8</th>\n<th align=\"center\">9</th>\n<th align=\"center\">12</th>\n<th align=\"center\">7</th>\n</tr>\n</thead>\n</table>\n<p>因为i与j还未相遇，即i与J之间还可能存在需要交换的数字，重新进入循环，</p>\n<p>进入第二次交换时i&#x3D;2,j&#x3D;5,此时a[i]&#x3D;2与a[j]&#x3D;1交换，数组如下</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">0</th>\n<th align=\"center\">1</th>\n<th align=\"center\">4</th>\n<th align=\"center\">6</th>\n<th align=\"center\">2</th>\n<th align=\"center\">3</th>\n<th align=\"center\">8</th>\n<th align=\"center\">9</th>\n<th align=\"center\">12</th>\n<th align=\"center\">7</th>\n</tr>\n</thead>\n</table>\n<p>接着进行i++与j–；此时i&#x3D;3,j&#x3D;4;因为要寻找到不大于中值(即a[mid]&#x3D;1)的值，因此j–直到j&#x3D;2</p>\n<p>此时i&gt;&#x3D;j因此不进行交换且结束循环，进入递归；进入递归前可发现大于中值的在中值的右边，小于中值的在中值左边；</p>\n<p>记住此时的i&#x3D;3,j&#x3D;2;</p>\n<p>先从左边递归，即在i&#x3D;1和j&#x3D;2之间排列；中值为0；需要寻找大于或小于中值的数，此时i&#x3D;2,j&#x3D;1;说明不需要进行交换，并且此时i和j已经为这部分区间的边界，即这部分已经排列完成；</p>\n<p>接着返回上一步，从右边进行递归，即在i&#x3D;3和j&#x3D;10之间进行排列；</p>\n<p>取中值mid&#x3D;6，即a[mid]&#x3D;3;</p>\n<p>进行寻找大于和小于中值的值，即i&#x3D;3,j&#x3D;6,即a[i]&#x3D;4,a[j]&#x3D;3;交换a[i]与a[j]；此时数组如下</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">0</th>\n<th align=\"center\">1</th>\n<th align=\"center\">3</th>\n<th align=\"center\">6</th>\n<th align=\"center\">2</th>\n<th align=\"center\">4</th>\n<th align=\"center\">8</th>\n<th align=\"center\">9</th>\n<th align=\"center\">12</th>\n<th align=\"center\">7</th>\n</tr>\n</thead>\n</table>\n<p>进行i++与j–，此时i&#x3D;4,j&#x3D;5；且此时a[i]与a[j]满足交换条件，进行交换，即</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">0</th>\n<th align=\"center\">1</th>\n<th align=\"center\">3</th>\n<th align=\"center\">2</th>\n<th align=\"center\">6</th>\n<th align=\"center\">4</th>\n<th align=\"center\">8</th>\n<th align=\"center\">9</th>\n<th align=\"center\">12</th>\n<th align=\"center\">7</th>\n</tr>\n</thead>\n</table>\n<p>进行i++与j–；此时i&#x3D;5,j&#x3D;4，退出循环；在l&#x3D;3(未排列数组的左边界)和j&#x3D;4之间进行递归</p>\n<p>进行循环寻找，交换数值，此时数组如下</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">0</th>\n<th align=\"center\">1</th>\n<th align=\"center\">2</th>\n<th align=\"center\">3</th>\n<th align=\"center\">6</th>\n<th align=\"center\">4</th>\n<th align=\"center\">8</th>\n<th align=\"center\">9</th>\n<th align=\"center\">12</th>\n<th align=\"center\">7</th>\n</tr>\n</thead>\n</table>\n<p>此时的i与j到达边界，返回上一步递归；</p>\n<p>进行右边的递归，即i&#x3D;5,j&#x3D;10；</p>\n<p>进行寻找，取中值mid&#x3D;7,a[mid]&#x3D;8,寻找大于小于中值的数，此时i&#x3D;7,j&#x3D;10,a[i]&#x3D;8,a[j]&#x3D;7;进行交换，数组如下</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">0</th>\n<th align=\"center\">1</th>\n<th align=\"center\">2</th>\n<th align=\"center\">3</th>\n<th align=\"center\">6</th>\n<th align=\"center\">4</th>\n<th align=\"center\">7</th>\n<th align=\"center\">9</th>\n<th align=\"center\">12</th>\n<th align=\"center\">8</th>\n</tr>\n</thead>\n</table>\n<p>进行i++与j–；此时i&#x3D;8,j&#x3D;9;寻找符合的i与j，最后i&#x3D;8,j&#x3D;7,不进行交换，进入递归；</p>\n<p>先左边递归，i&#x3D;5,j&#x3D;7;mid&#x3D;6,a[mid]&#x3D;4;</p>\n<p>进行交换时i&#x3D;5,j&#x3D;6;数组如下；</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">0</th>\n<th align=\"center\">1</th>\n<th align=\"center\">2</th>\n<th align=\"center\">3</th>\n<th align=\"center\">4</th>\n<th align=\"center\">6</th>\n<th align=\"center\">7</th>\n<th align=\"center\">9</th>\n<th align=\"center\">12</th>\n<th align=\"center\">8</th>\n</tr>\n</thead>\n</table>\n<p>到达边界，返回上一步；</p>\n<p>进行右边递归，i&#x3D;8,j&#x3D;10;取中值mid&#x3D;9,a[mid]&#x3D;12；</p>\n<p>进行交换时i&#x3D;9，j&#x3D;10；交换后如下</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">0</th>\n<th align=\"center\">1</th>\n<th align=\"center\">2</th>\n<th align=\"center\">3</th>\n<th align=\"center\">4</th>\n<th align=\"center\">6</th>\n<th align=\"center\">7</th>\n<th align=\"center\">9</th>\n<th align=\"center\">8</th>\n<th align=\"center\">12</th>\n</tr>\n</thead>\n</table>\n<p>i++和j–后，i&#x3D;10,j&#x3D;9；接着推出循环。左边递归；</p>\n<p>此时i&#x3D;8,j&#x3D;9;取中值mid&#x3D;8,a[mid]&#x3D;9寻找相应数，进行交换，此时i&#x3D;8,j&#x3D;9;交换后</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">0</th>\n<th align=\"center\">1</th>\n<th align=\"center\">2</th>\n<th align=\"center\">3</th>\n<th align=\"center\">4</th>\n<th align=\"center\">6</th>\n<th align=\"center\">7</th>\n<th align=\"center\">8</th>\n<th align=\"center\">9</th>\n<th align=\"center\">12</th>\n</tr>\n</thead>\n</table>\n<p>排列完成，结束退出；</p>\n<h3 id=\"具体代码（C语言）\"><a href=\"#具体代码（C语言）\" class=\"headerlink\" title=\"具体代码（C语言）\"></a>具体代码（C语言）</h3><p>#include &lt;stdio.h&gt;<br>int a[1024];<br>void Quick_Sort(int l,int r){<br>    int i,j,mid,p;<br>    i&#x3D;l,j&#x3D;r,mid&#x3D;a[(l+r)&#x2F;2];<br>    do{<br>        while(a[i]&lt;mid)i++;<br>        while(a[j]&gt;mid)j–;<br>        if(i&lt;&#x3D;j){<br>            p&#x3D;a[i],a[i]&#x3D;a[j],a[j]&#x3D;p;<br>            i++,j–;<br>        }<br>    }while(i&lt;&#x3D;j);<br>    if(l&lt;j)ch(l,j);<br>    if(i&lt;r)ch(i,r);<br>}<br>int main(){<br>    int n;<br>    printf(“输入要输入的数的数量\\n”);<br>    scanf(“%d”,&amp;n);<br>    printf(“输入数字\\n”);<br>     for(int i&#x3D;1;i&lt;&#x3D;n;i++)scanf(“%d”,&amp;a[i]);<br>    Quick_Sort(1,n);<br>     for(int i&#x3D;1;i&lt;&#x3D;n;i++){<br>         printf(“%d “,a[i]);<br>     }<br>     return 0;<br>}</p>\n"},{"title":"看板娘","url":"/2022/10/01/%E7%9C%8B%E6%9D%BF%E5%A8%98/","content":"<h2 id=\"一、安装hexo-helper-live2d-插件\"><a href=\"#一、安装hexo-helper-live2d-插件\" class=\"headerlink\" title=\"一、安装hexo-helper-live2d 插件\"></a>一、安装hexo-helper-live2d 插件</h2><figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><code class=\"hljs text\">npm install --save hexo-helper-live2d<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"二、下载live2d模型\"><a href=\"#二、下载live2d模型\" class=\"headerlink\" title=\"二、下载live2d模型\"></a>二、下载live2d模型</h2><p>下面给出看板娘模型的名单和预览图，你可以挑一个想要的</p>\n<p>预览图：<a href=\"https://link.zhihu.com/?target=https://huaji8.top/post/live2d-plugin-2.0/\">https://huaji8.top/post/live2d-plugin-2.0/</a></p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><code class=\"hljs text\">live2d-widget-model-chitose<br>live2d-widget-model-epsilon2_1<br>live2d-widget-model-gf<br>live2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)<br>live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)<br>live2d-widget-model-haruto<br>live2d-widget-model-hibiki<br>live2d-widget-model-hijiki<br>live2d-widget-model-izumi<br>live2d-widget-model-koharu<br>live2d-widget-model-miku<br>live2d-widget-model-ni-j<br>live2d-widget-model-nico<br>live2d-widget-model-nietzsche<br>live2d-widget-model-nipsilon<br>live2d-widget-model-nito<br>live2d-widget-model-shizuku<br>live2d-widget-model-tororo<br>live2d-widget-model-tsumiki<br>live2d-widget-model-unitychan<br>live2d-widget-model-wanko<br>live2d-widget-model-z16<br></code></pre></td></tr></table></figure>\n\n<p>然后执行指令↓</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><code class=\"hljs text\">npm install live2d-widget-model-koharu //假设你选择的看板娘是koharu<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"三、修改-config-yml配置文件\"><a href=\"#三、修改-config-yml配置文件\" class=\"headerlink\" title=\"三、修改_config.yml配置文件\"></a>三、修改_config.yml配置文件</h2><p>找到你博客的本地存储的根目录，打开_config.yml文件，添加下面的内容</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><code class=\"hljs text\">#Live2D动画<br>live2d:<br>  enable: true<br>  scriptFrom: local<br>  pluginRootPath: live2dw/<br>  pluginJsPath: lib/<br>  pluginModelPath: assets/<br>  tagMode: false<br>  debug: false<br>  model:<br>    use: live2d-widget-model-koharu <br>  display:<br>    position: right <br>    width: 150<br>    height: 300<br>  mobile:<br>    show: true<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"四、主要参数说明\"><a href=\"#四、主要参数说明\" class=\"headerlink\" title=\"四、主要参数说明\"></a>四、主要参数说明</h2><ol>\n<li>enable &#x2F;&#x2F;是否使用</li>\n<li>model:<br>use: live2d-widget-model-koharu &#x2F;&#x2F;要使用的模型名称</li>\n<li>display:<br>position: right &#x2F;&#x2F;显示的位置<br>width: 150 &#x2F;&#x2F;宽度<br>height: 150 &#x2F;&#x2F;高度<br>mobile:<br>show: true &#x2F;&#x2F;移动端是否显示</li>\n</ol>\n<h2 id=\"五、调试-amp-部署\"><a href=\"#五、调试-amp-部署\" class=\"headerlink\" title=\"五、调试&amp;部署\"></a>五、调试&amp;部署</h2><p>在你已经安装git环境的基础上，在博客的本地存储根目录下右键-&gt;Git Bash Here</p>\n<p>依次输入↓</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><code class=\"hljs text\">hexo clean<br>hexo g<br>hexo s<br></code></pre></td></tr></table></figure>\n\n<p>现在你就可以在本地预览一下自己的博客精灵啦，打开浏览器登录：<strong>localhost:4000</strong></p>\n<p>或者，<a href=\"https://link.zhihu.com/?target=http://localhost:4000/\">点击这里</a>~</p>\n<p>相中好看板娘之后，就可以部署到GitHub pages上了</p>\n<p>回到git，输入下面的指令并成功登录后…</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><code class=\"hljs text\">hexo d<br></code></pre></td></tr></table></figure>\n"},{"title":"时间复杂度与空间复杂度","url":"/2022/10/13/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%B8%8E%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/","content":"<p>在数据结构和算法中，因为算法本身是不分“好坏”的，而所谓“最好”的算法，则是指最适合当前场景的算法。因此通常考虑程序的执行效率和占用的内存空间，即时间复杂度和空间复杂度，时间复杂度用来表示算法运行时间，空间复杂度用来表示算法所使用的空间。</p>\n<p>通常用O来表示复杂度；</p>\n<p>对于空间复杂度，在一个执行的程序中，占用的内存空间主要包括：</p>\n<p>1.程序代码本身所占用的存储空间；</p>\n<p>2.如果需要输入输出数据，也会占用一定的存储空间；</p>\n<p>3.运行过程中，可能还需要临时申请更多的存储空间。</p>\n<p>对于第一点，可以通过在编写代码的同时在保证功能的前提下，尽可能的编写足够短的代码；</p>\n<p>对于第二点，程序运行过程中输入输出的数据，往往由要解决的问题而定，即便所用算法不同，程序输入输出所占用的存储空间也是相近的。</p>\n<p>对于第三点，在程序运行过程中临时申请的内存空间，不同算法编写出的程序，运行时申请的临时存储空间通常会有较大不同，因此根据不同的情况编写合适的代码，可以减少空间复杂度；</p>\n<p>空间复杂度的估算方法是：</p>\n<ul>\n<li>如果算法中额外申请的内存空间不受用户输入值的影响（即一个固定值），那么该算法的空间复杂度用<code>O(1)</code>表示；</li>\n<li>如果随着输入值 n 的增大，算法申请的存储空间成线性增长，则程序的空间复杂度用<code>O(n)</code>表示;</li>\n<li>如果随着输入值 n 的增大，程序申请的存储空间成 n^2 关系增长，则程序的空间复杂度用<code>O(n^2)</code>表示；</li>\n<li>如果随着输入值 n 的增大，程序申请的存储空间成 n^3 关系增长，则程序的空间复杂度用<code>O(n^3)</code>表示；</li>\n</ul>\n<p>大多数情况下，一个好的程序更注重时间复杂度，空间复杂度在一个合理范围即可；</p>\n<p>对于时间复杂度，即预估算法的执行时间；</p>\n<p>计算一个算法的时间复杂度，需要经过以下 3 个步骤：</p>\n<h4 id=\"1-统计算法中各个步骤的执行次数\"><a href=\"#1-统计算法中各个步骤的执行次数\" class=\"headerlink\" title=\"1) 统计算法中各个步骤的执行次数\"></a>1) 统计算法中各个步骤的执行次数</h4><h4 id=\"2-简化算法的执行次数\"><a href=\"#2-简化算法的执行次数\" class=\"headerlink\" title=\"2) 简化算法的执行次数\"></a>2) 简化算法的执行次数</h4><h4 id=\"3-用大O记法表示算法的时间复杂度\"><a href=\"#3-用大O记法表示算法的时间复杂度\" class=\"headerlink\" title=\"3) 用大O记法表示算法的时间复杂度\"></a>3) 用大O记法表示算法的时间复杂度</h4><p>在简化中，以 3<em>n2+4</em>n+5 为例，简化过程为：</p>\n<ol>\n<li>当 n 无限大时，3n^2+4n 与 3<em>n^2+4</em>n+5 的值非常接近，是否加 5 对表达式的值影响不大，因此表达式可以简化为 3<em>n^2+4</em>n；</li>\n<li>当 n 无限大时，3<em>n^2 的值要远远大于 4</em>n 的值，它们之间类似于 10000 和 1 之间的关系，因此是否加 4<em>n 对表达式最终的值影响不大，整个表达式可以简化为 3</em>n^2；</li>\n<li>当 n 无限大时，n^2 的值已经超级大，是否乘 3 对最终结果影响不大，整个表达式可以简化为  n^2。</li>\n</ol>\n<p>基于“n 值无限大”的思想，3<em>n^2+4</em>n+5 最终就简化成了 n^2。</p>\n<p>一般情况下的时间复杂度之间大小有以下关系</p>\n<p>O(1)&lt; O(logn) &lt; O(n) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n)</p>\n<p>其中<code>O(1)</code>是最小的，对应的算法的执行时间最短，执行效率最高。</p>\n<p>最后在实际过程，往往采用 “预先估值”的方法挑选算法。具体来讲，就是分析各个算法的实现过程（步骤），估算出它们各自的运行时间和占用的内存大小，就可以挑选出“最好”的算法。</p>\n"},{"title":"插入排序","url":"/2022/10/07/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/","content":"<p>#include &lt;stdio.h&gt;<br>int main(){<br>    int n;<br>    &#x2F;<em>printf(“输入要输入的数的数量\\n”);<br>    scanf(“%d”,&amp;n);<br>    printf(“输入数字\\n”);</em>&#x2F;<br>     n&#x3D;4;<br>     int a[n+1];<br>      for(int i&#x3D;1;i&lt;&#x3D;n;i++)scanf(“%d”,&amp;a[i]);<br>     for(int i&#x3D;1;i&lt;&#x3D;n;i++){<br>         int j,t,k;<br>         for(j&#x3D;i-1;j&gt;&#x3D;1;j–){<br>             if(a[i]&gt;a[j])break;<br>             }<br>             if(j!&#x3D;i-1){<br>                 t&#x3D;a[i];<br>                 for(k&#x3D;i-1;k&gt;j;k–)a[k+1]&#x3D;a[k];<br>                 a[k+1]&#x3D;t;<br>             }<br>     }<br>    for(int i&#x3D;1;i&lt;&#x3D;n;i++){<br>         printf(“%d “,a[i]);<br>     }<br>     return 0;<br>} </p>\n"}]